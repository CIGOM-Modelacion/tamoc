######################################
Chemical Properties Users Guide
######################################

:Release: |version|
:Date: |today|

Scripts
=======

the ``TAMOC`` files associated with chemical properties data include the 
following

.. toctree::
   :maxdepth: 1
   
   ../modules/chem_data
   ../autodoc/chem/chemical_properties.load_data

Examples
========

The main purpose of this script is to load in the default chemical property
data in ``./data/ChemData.csv`` and to store that data in a Python dictionary,
available to other programs. This script can also be used to import
user-defined chemical properties data in other ``.csv files``. Within
``TAMOC`` this script is generally not used by the user; rather, the class
objects, methods, and functions in the `dbm` module provides a fluid interface
to these databases.

Usage within ``TAMOC``
======================

To load the data, simply import the script and optionally assign a new 
namespace for storing the databases::

>> import chemical_properties as chem

After import, two new dictionaries will be created, one with the properties 
(called `chem.data`) and another with the units (called `chem.units`).  The 
`chem.data` dictionary is double-nested, with the first set of keys choosing
a chemical component, and the second set of keys choosing a particular 
property.

As an example::

   >> chem.data.keys()
   ['benzene',
    'n-decane',
    'nitrogen',
    '3-methylpentane',
    'hydrogen',
    'neohexane',
    'carbon_monoxide',
    'n-butane',
    'carbon_dioxide',
    'ethylbenzene',
    'isopentane',
    'isobutane',
    'propane',
    'n-heptane',
    'water',
    '2-methylpentane',
    'n-pentane',
    'toluene',
    'n-hexane',
    'neopentane',
    'oxygen',
    'hydrogen_sulfide',
    'argon',
    '2-3-dimethylbutane',
    'ethane',
    'sulfure_dioxide',
    'methane']

Focusing on the nested dictionary for one of these keys, we have::

   >> chem.data['oxygen'].keys()
   ['B', 'dH_solR', 'dE', 'M', 'Pc', 'nu_bar', 'kh_0', 'omega', 'Tc']

To access the value for one of these keys, just use the double-nested 
index::

   >>> chem.data['oxygen']['M']    # Molecular weight
   0.031998800000000001

The `chem.units` database provides access to the units of each of these 
variables.  Because the units are independent of the chemical, the units
database only includes the second dictionary of keys::

   >>> chem.units.keys()
   ['Pc', 'nu_bar', 'Compound', 'kh_0', 'omega', 'B', 'dE', 'M', 'Tc', 'dH_solR']
   >>> chem.units['M']
   '(kg/mol)'


Usage to Import User-Defined Data
=================================

It may often occur that the user needs to specify the properties of 
compounds not in the default database.  The easiest way to do this is to 
create a new database, for instance ``./Inputs/my_data.csv`` that contains
the needed compounds.  This can be done for instance with::

    >> data, units = chemical_properties.load_data('./Input/my_data.csv')

In the discrete bubble model `dbm`, ``TAMOC`` imports the default data
base.  When the user creates a `dbm` object, there is the option to pass
a user-defined database.  If this is done, `dbm` looks in the user-defined
database first to find properties for compounds in a composition.  This 
allows the user to also override the properties in the default database.  
If the compound is not found in the user-defined database, then the `dbm` 
object looks in the default database.  Hence, it is not necessary to repeat 
any of the compounds in the default database when building a user-defined
database, unless one desires to override the default property values.

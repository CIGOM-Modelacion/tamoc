##########################
Sintef Module User's Guide
##########################

:Release: |version|
:Date: |today|

Scripts
=======

The functions defined in the `sintef` module provide the means to compute
volume mean diameter (d_50) or oil and gas from a blowout and the resulting
particle size distribution on a volume basis. These functions are based on the
work published in Johansen, Brandvik, and Farooq (2013), "Droplet breakup in
subsea oil releases - Part 2: Predictions of droplet size distributions with
and without injection of chemical dispersants." Marine Pollution Bulletin, 73:
327-335. doi:10.1016/j.marpolbul.2013.04.012.

The example detailed below demonstrates how to interact with the functions
defined in the `sintef` module. Further examples are presented in the
following scripts distributed in the ``./bin/sintef`` directory with the
source code.

.. toctree::
   :maxdepth: 1
   
   ../scripts/sintef/particle_size_distribution

Examples
========

This simple example demonstrates how to compute the volume mean diameter for
an oil leak and compute the particle size distribution.  For a more complete
example, please see the script file listed above.

Volume Mean Diameter
--------------------

The first step in evaluating a particle size distribution from an oil leak
or well blowout is to compute a characteristic droplet size.  For the SINTEF
model defined in Johansen et al. (2013), the characteristic scale is the 
volume mean diameter, d_50.  We will consider a simple oil leak here.

Import the necessary tools and input the oil and seawater properties::

   >>> from tamoc import sintef
   >>> from tamoc import seawater
   >>> rho_p = 850.
   >>> mu_p = 0.0005
   >>> sigma_p = 0.026
   >>> rho = seawater.density(273.15+4.5, 34.5, 100.e5)

Specify the outlet conditions for the release::

   >>> D = 0.03
   >>> Q = 0.005
   >>> md = Q * rho_p

Compute the volume mean diameter.  The function call can consider flows of 
oil and gas together.  When only one phase is present, pass zeros for the 
parameters of the absent phase::

   >>> d50_oil, _ = sintef.modified_We_model(D, rho_p, md, mu_p, sigma_p, 0., 0., 0., 0., rho)

This also works by reversing the inputs with only one immiscible phase is 
present::

   >>> _, d50_oil = sintef.modified_We_model(D, 0., 0., 0., 0., rho_p, md, mu_p, sigma_p, rho)

The resulting droplet size is::

   >>> d50_oil
   0.00067659800106017825

Maximum Stable Droplet Size
---------------------------

The volume mean diameter calculation always checks to ensure that the 
returned value does not exceed a theoretical value for the maximum stable
droplet size for the given fluids.  In this example, the maximum stable
droplet size can be computed as follows::

   >>> dmax = sintef.de_max(sigma_p, rho_p, rho)
   >>> dmax
   0.015267057735857908

Hence, the value for d_50 computed above was below the maximum stable 
droplet size.  This is expected for such a high leak flow rate through a 
small leak hole.  

Droplet Size Distribution
-------------------------

The droplet size distribution is obtained from the Rosin-Rammler distribution
with an assumed known spread coefficient (see Johansen et al. 2013 for 
details).  From the compute d_50, the volume size distribution can be 
calculated for any number of bins.  Consider an example with 20 bins::

   >>> nbins = 25
   >>> de_oil, md_oil = sintef.rosin_rammler(nbins, d50_oil, md, sigma_p, rho_p, rho)
   >>> de_oil
   array([  7.41874956e-05,   8.91929874e-05,   1.07233557e-04,
            1.28923091e-04,   1.54999647e-04,   1.86350564e-04,
            2.24042655e-04,   2.69358516e-04,   3.23840164e-04,
            3.89341511e-04,   4.68091452e-04,   5.62769705e-04,
            6.76598001e-04,   8.13449713e-04,   9.77981660e-04,
            1.17579257e-03,   1.41361359e-03,   1.69953734e-03,
            2.04329330e-03,   2.45657886e-03,   2.95345740e-03,
            3.55083679e-03,   4.26904478e-03,   5.13252071e-03,
            6.17064711e-03])
   >>> md_oil
   array([ 0.01997373,  0.02696623,  0.03658705,  0.0497585 ,  0.06766545,
           0.09177166,  0.12377268,  0.1654128 ,  0.21804747,  0.28178723,
           0.35406647,  0.42767454,  0.4889011 ,  0.51767027,  0.49287299,
           0.40515515,  0.27211148,  0.13876944,  0.0491626 ,  0.01156503,
           0.0028402 ,  0.00189551,  0.00185774,  0.00185734,  0.00185734])

The data are more easily interpreted via histogram::

   >>> from matplotlib import pyplot as plt
   >>> plt.figure(1)
   >>> plt.clf()
   >>> index = np.arange(nbins)
   >>> bar_width = 0.75
   >>> opacity = 0.4
   >>> plt.bar(index, md_oil, bar_width, alpha=opacity, color='b')
   >>> ntics = 10
   >>> dtics = int(round(nbins/np.float(ntics)))
   >>> ticnums = []
   >>> ticlocs = []
   >>> for i in range(ntics):
          ticnums.append('%2.2f' % (de_oil[(i)*dtics]*1000.))
          ticlocs.append(index[(i)*dtics] + bar_width/2)
   
   >>> plt.xticks(ticlocs, ticnums)
   >>> plt.xlabel('Oil droplet size (mm)')
   >>> plt.ylabel('Oil mass flux (kg/s)')
   >>> plt.show()

